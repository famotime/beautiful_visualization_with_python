<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="图5-2-1 (b)曲面拟合方法&#10;" _note="from statsmodels.formula.api import ols&#10;import pandas as pd&#10;import numpy as np&#10;import matplotlib.pyplot as plt&#10;&#10;&#10;df = pd.read_csv('Surface_Data.csv')&#10;df&#10;&#10;```&#10;```&#10;      x   y    z&#10;0    14  11  132&#10;1    12  11  154&#10;2    13  10  158&#10;3    10  12  132&#10;4    12  12  121&#10;..   ..  ..  ...&#10;335  14  35   38&#10;336  17  35   54&#10;337  12  35   38&#10;338  15  36   49&#10;339  19  35   52&#10;&#10;[340 rows x 3 columns]&#10;```&#10;&#10;```python&#10;# 多项式拟合z=f(x, y)=a+bx+cy+dx2+ey2&#10;formula = 'z~x+np.square(x)+y+np.square(y)'&#10;est = ols(formula, data=df).fit()&#10;print(est.summary())&#10;&#10;N = 30&#10;xmar = np.linspace(min(df.x), max(df.x), N)&#10;ymar = np.linspace(min(df.y), max(df.y), N)&#10;X, Y = np.meshgrid(xmar, ymar)&#10;df_grid = pd.DataFrame({'x': X.flatten(), 'y': Y.flatten()})&#10;&#10;Z = est.predict(df_grid)&#10;&#10;fig = plt.figure(figsize=(10, 8), dpi=90)&#10;ax = fig.gca(projection='3d')&#10;# ax =  fig.add_subplot(projection='3d')&#10;# ax.set_aspect('equal','box')&#10;ax.view_init(azim=60, elev=20)&#10;# 改变绘制图像的视角,即相机的位置,azim沿着z轴旋转，elev沿着y轴&#10;&#10;ax.grid(False)&#10;&#10;ax.xaxis._axinfo['tick']['outward_factor'] = 0&#10;ax.xaxis._axinfo['tick']['inward_factor'] = 0.4&#10;ax.yaxis._axinfo['tick']['outward_factor'] = 0&#10;ax.yaxis._axinfo['tick']['inward_factor'] = 0.4&#10;ax.zaxis._axinfo['tick']['outward_factor'] = 0&#10;ax.zaxis._axinfo['tick']['inward_factor'] = 0.4&#10;&#10;ax.xaxis.pane.fill = False&#10;ax.yaxis.pane.fill = False&#10;ax.zaxis.pane.fill = False&#10;&#10;ax.xaxis.pane.set_edgecolor('k')&#10;ax.yaxis.pane.set_edgecolor('k')&#10;ax.zaxis.pane.set_edgecolor('k')&#10;&#10;p = ax.plot_surface(X, Y, Z.values.reshape(N, N), rstride=1, cstride=1, cmap='Spectral_r',&#10;                    alpha=1, edgecolor='k', linewidth=0.25)&#10;&#10;ax.set_xlabel(&quot;Gax Mileage (mpg)&quot;)&#10;ax.set_ylabel(&quot;0-60 mph (sec)&quot;)&#10;ax.set_zlabel(&quot;Power (KW)&quot;)&#10;ax.set_zlim(50, 170)&#10;&#10;&#10;cbar = fig.colorbar(p, shrink=0.5, aspect=10)&#10;cbar.set_label('Power (kW)')&#10;# fig.savefig('三维曲面图2.pdf')&#10;&#10;```&#10;```&#10;                            OLS Regression Results                            &#10;==============================================================================&#10;Dep. Variable:                      z   R-squared:                       0.701&#10;Model:                            OLS   Adj. R-squared:                  0.697&#10;Method:                 Least Squares   F-statistic:                     195.9&#10;Date:                Sat, 10 Apr 2021   Prob (F-statistic):           2.28e-86&#10;Time:                        16:56:38   Log-Likelihood:                -1410.8&#10;No. Observations:                 340   AIC:                             2832.&#10;Df Residuals:                     335   BIC:                             2851.&#10;Df Model:                           4                                         &#10;Covariance Type:            nonrobust                                         &#10;================================================================================&#10;                   coef    std err          t      P&amp;gt;|t|      [0.025      0.975]&#10;--------------------------------------------------------------------------------&#10;Intercept      290.7007     18.804     15.460      0.000     253.713     327.689&#10;x               -4.2189      2.123     -1.987      0.048      -8.396      -0.042&#10;np.square(x)     0.1314      0.064      2.052      0.041       0.005       0.257&#10;y              -12.9581      1.002    -12.936      0.000     -14.929     -10.988&#10;np.square(y)     0.2039      0.022      9.395      0.000       0.161       0.247&#10;==============================================================================&#10;Omnibus:                       45.663   Durbin-Watson:                   1.814&#10;Prob(Omnibus):                  0.000   Jarque-Bera (JB):              123.583&#10;Skew:                           0.622   Prob(JB):                     1.46e-27&#10;Kurtosis:                       5.679   Cond. No.                     1.41e+04&#10;==============================================================================&#10;&#10;Warnings:&#10;[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.&#10;[2] The condition number is large, 1.41e+04. This might indicate that there are&#10;strong multicollinearity or other numerical problems.&#10;&#10;```&#10;&#10;```python&#10;# -------------------------等高线图---------------------------------------------------&#10;&#10;fig, ax = plt.subplots(figsize=(5, 4), dpi=90)&#10;&#10;CS = ax.contour(X, Y, Z.values.reshape(N, N),&#10;                levels=10, linewidths=0.5, colors='k')&#10;cntr = ax.contourf(X, Y, Z.values.reshape(N, N), levels=10, cmap=&quot;Spectral_r&quot;)&#10;# scat=ax.scatter(df.x, df.y,c=df.z,s=40, linewidths=0.5, edgecolors=&quot;k&quot;,alpha=0.8)&#10;ax.set_xlabel(&quot;Gax Mileage (mpg)&quot;)&#10;ax.set_ylabel(&quot;0-60 mph (sec)&quot;)&#10;&#10;fig.colorbar(cntr, ax=ax, label=&quot;Power (KW)&quot;)&#10;CS.levels = [int(val) for val in cntr.levels]&#10;ax.clabel(CS, CS.levels, fmt='%.0f', inline=True,  fontsize=10)&#10;&#10;```&#10;```&#10;&amp;lt;a list of 12 text.Text objects&amp;gt;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>