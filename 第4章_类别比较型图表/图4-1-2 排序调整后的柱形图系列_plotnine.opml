<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="图4-1-2 排序调整后的柱形图系列_plotnine&#10;" _note="import pandas as pd&#10;import numpy as np&#10;from plotnine import *&#10;# from plotnine.data import *&#10;# import matplotlib.pyplot as plt&#10;&#10;```&#10;">
    <outline text="a)单数剧系列柱形图&#10;" _note="mydata = pd.DataFrame({'Cut': [&quot;Fair&quot;, &quot;Good&quot;, &quot;Very Good&quot;, &quot;Premium&quot;, &quot;Ideal&quot;],&#10;                       'Price': [4300, 3800, 3950, 4700, 3500]})&#10;&#10;Sort_data = mydata.sort_values(by='Price', ascending=False)&#10;&#10;# Sort_data['Cut']=Sort_data['Cut'].astype(&quot;category&quot;,categories=Sort_data['Cut'],ordered=True)&#10;&#10;Sort_data['Cut'] = pd.Categorical(&#10;    Sort_data['Cut'], ordered=True, categories=Sort_data['Cut'])&#10;&#10;base_plot = (ggplot(Sort_data, aes('Cut', 'Price'))&#10;             + geom_bar(stat=&quot;identity&quot;, width=0.8, colour=&quot;black&quot;,&#10;                        size=0.25, fill=&quot;# FC4E07&quot;, alpha=1)&#10;             + ylim(0, 6000)&#10;             + theme(&#10;    axis_title=element_text(size=18, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    axis_text=element_text(size=16, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    aspect_ratio=1.15,&#10;    figure_size=(6.5, 6.5),&#10;    dpi=50&#10;)&#10;)&#10;print(base_plot)&#10;# base_plot.save('Bar_Plot.pdf')&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 325x376.177 with 1 Axes&amp;gt;&#10;```&#10;" />
    <outline text="b)双数剧系列柱形图&#10;" _note="df = pd.read_csv('MultiColumn_Data.csv')&#10;df = df.sort_values(by='1996', ascending=False)&#10;&#10;mydata = pd.melt(df, id_vars='Catergory')&#10;&#10;display(df, mydata)&#10;&#10;```&#10;```&#10;           Catergory  1996  1997&#10;0  Temporary\nStream  7.67  5.84&#10;1  Permanent\nStream  4.02  6.45&#10;2               Lake  3.95  6.76&#10;```&#10;&#10;```python&#10;mydata['Catergory'] = pd.Categorical(&#10;    mydata['Catergory'], ordered=True, categories=df['Catergory'])&#10;&#10;&#10;base_plot = (ggplot(mydata, aes(x='Catergory', y='value', fill='variable'))&#10;             + geom_bar(stat=&quot;identity&quot;, color=&quot;black&quot;,&#10;                        position='dodge', width=0.7, size=0.25)&#10;             + scale_fill_manual(values=[&quot;# 00AFBB&quot;, &quot;# FC4E07&quot;, &quot;# E7B800&quot;])&#10;             + ylim(0, 10)&#10;             + theme(legend_title=element_text(size=18, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                     legend_text=element_text(&#10;                         size=16, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                     axis_title=element_text(&#10;                         size=18, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                     axis_text=element_text(&#10;                         size=16, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                     legend_background=element_blank(),&#10;                     legend_position=(0.75, 0.80),&#10;                     aspect_ratio=1.15,&#10;                     figure_size=(6.5, 6.5),&#10;                     dpi=50&#10;                     )&#10;             )&#10;print(base_plot)&#10;# base_plot.save('Bar_Plot2.pdf')&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 325x376.177 with 1 Axes&amp;gt;&#10;```&#10;" />
    <outline text="c)堆积柱形图&#10;" _note="df = pd.read_csv('StackedColumn_Data.csv')&#10;df&#10;&#10;```&#10;```&#10;     Clarity    I1   SI2   SI1   VS2   VS1    S2    S1    IF&#10;0       Fair   150   400   390   300   130   100   100   150&#10;1       Good  1200  1100  1700   900   790  1300  1200  1100&#10;2  Very_Good  1300  2300  3300  1900  1800  1900  1700  1300&#10;3    Premium  2800  2900  3500  2800  3000  1800  1600  1280&#10;4      Ideal  2000  2700  4200  3300  4200  2700  2100  1300&#10;```&#10;&#10;```python&#10;Sum_df = df.iloc[:, 1:].apply(&#10;    lambda x: x.sum(), axis=0).sort_values(ascending=False)&#10;&#10;meanRow_df = df.iloc[:, 1:].apply(lambda x: x.mean(), axis=1)&#10;&#10;Sing_df = df['Clarity'][meanRow_df.sort_values(ascending=True).index]&#10;&#10;mydata = pd.melt(df, id_vars='Clarity')&#10;&#10;mydata['variable'] = pd.Categorical(mydata['variable'], categories=Sum_df.index, ordered=True)&#10;mydata['Clarity'] = pd.Categorical(mydata['Clarity'], categories=Sing_df, ordered=True)&#10;&#10;base_plot = (ggplot(mydata, aes(x='variable', y='value', fill='Clarity'))&#10;             + geom_bar(stat=&quot;identity&quot;, color=&quot;black&quot;,&#10;                        position='stack', width=0.7, size=0.25)&#10;             + scale_fill_brewer(palette=&quot;YlOrRd&quot;)&#10;             + ylim(0, 15000)&#10;             + theme(&#10;    legend_title=element_text(size=18, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    legend_text=element_text(size=16, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    axis_title=element_text(size=18, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    axis_text=element_text(size=16, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    legend_background=element_blank(),&#10;    legend_position=(0.75, 0.75),&#10;    aspect_ratio=1.15,&#10;    figure_size=(6.5, 6.5),&#10;    dpi=50&#10;)&#10;)&#10;print(base_plot)&#10;# base_plot.save('Bar_Plot3.pdf')&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 325x376.177 with 1 Axes&amp;gt;&#10;```&#10;" />
    <outline text="d)百分比堆积柱形图&#10;" _note="df = pd.read_csv('StackedColumn_Data.csv')&#10;&#10;SumCol_df = df.iloc[:, 1:].apply(lambda x: x.sum(), axis=0)&#10;&#10;df.iloc[:, 1:] = df.iloc[:, 1:].apply(lambda x: x/SumCol_df, axis=1)&#10;&#10;meanRow_df = df.iloc[:, 1:].apply(lambda x: x.mean(), axis=1)&#10;&#10;Per_df = df.iloc[meanRow_df.idxmax(), 1:].sort_values(ascending=False)&#10;&#10;Sing_df = df['Clarity'][meanRow_df.sort_values(ascending=True).index]&#10;&#10;mydata = pd.melt(df, id_vars='Clarity')&#10;mydata['Clarity'] = pd.Categorical(mydata['Clarity'], categories=Sing_df, ordered=True)&#10;mydata['variable'] = pd.Categorical(mydata['variable'], categories=Per_df.index, ordered=True)&#10;&#10;base_plot = (ggplot(mydata, aes(x='variable', y='value', fill='Clarity'))&#10;             + geom_bar(stat=&quot;identity&quot;, color=&quot;black&quot;,&#10;                        position='fill', width=0.7, size=0.25)&#10;             + scale_fill_brewer(palette=&quot;GnBu&quot;)&#10;             # +ylim(0, 10)&#10;             + theme(&#10;    # text=element_text(size=15,face=&quot;plain&quot;,color=&quot;black&quot;),&#10;    legend_title=element_text(size=18, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    legend_text=element_text(size=16, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    axis_title=element_text(size=18, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    axis_text=element_text(size=16, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    aspect_ratio=1.15,&#10;    figure_size=(6.5, 6.5),&#10;    dpi=50&#10;)&#10;)&#10;print(base_plot)&#10;# base_plot.save('Bar_Plot4.pdf')&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 325x376.177 with 1 Axes&amp;gt;&#10;```&#10;&#10;" />
    </outline>
  </outline>
  </body>
</opml>