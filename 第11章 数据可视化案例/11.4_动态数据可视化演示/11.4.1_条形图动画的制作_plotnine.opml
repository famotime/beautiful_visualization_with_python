<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="11.4.1_条形图动画的制作_plotnine&#10;" _note="import pandas as pd&#10;import numpy as np&#10;from plotnine import *&#10;from plotnine.animation import PlotnineAnimation&#10;from matplotlib import cm,colors&#10;# for animation in the notebook&#10;from matplotlib import rc&#10;rc('animation', html='html5')&#10;import seaborn as sns&#10;import copy&#10;```&#10;&#10;```python&#10;import warnings&#10;warnings.filterwarnings('ignore')&#10;```&#10;&#10;```python&#10;df = pd.read_csv('city_populations.csv',usecols=['name', 'group', 'year', 'value'])&#10;categories=np.unique(df.group)&#10;# cmap=cm.get_cmap('Set1',len(categories))&#10;# color=[colors.rgb2hex(cmap(i)[:3]) for i in range(cmap.N)] &#10;color = sns.husl_palette(len(categories),h=15/360, l=.65, s=1).as_hex() &#10;# df['group']=pd.Categorical(df['group'],categories=categories, ordered=True)&#10;group_lk = df.set_index('name')['group'].to_dict()&#10;```&#10;&#10;```python&#10;year1=1970&#10;year2=1971&#10;dff1=df.loc[df['year'].eq(year1),:]  .sort_values(by='value', ascending=False)&#10;dff1['name']=pd.Categorical(dff1['name'],categories=dff1['name'], ordered=True)&#10;dff1['order1']=dff1['name'].values.codes&#10;    &#10;dff2=df.loc[df['year'].eq(year2),:]  .sort_values(by='value', ascending=False)&#10;dff2['name']=pd.Categorical(dff2['name'],categories=dff2['name'], ordered=True)&#10;dff2['order2']=dff2['name'].values.codes&#10;# df_temp1=df.query('year&amp;gt;=@year &amp; year&amp;lt;=@year+1').groupby(by='name',as_index=False).mean()&#10;&#10;dff=pd.merge(left=dff1,right=dff2[['name','order2','value']],how=&quot;outer&quot;,on=&quot;name&quot;)&#10;dff.loc[:,['value_x','value_y']]  = dff.loc[:,['value_x','value_y']] .replace(np.nan, 0)&#10;dff.loc[:,['order1','order2']]  = dff.loc[:,['order1','order2']] .replace(np.nan, dff['order1'].max()+1)&#10;dff['group']=[group_lk[x] for x in dff.name]&#10;&#10;location_x=0.5&#10;dff['value']=dff['value_x']+(dff['value_y']-dff['value_x'])*location_x&#10;dff['x']=dff['order1']+(dff['order2']-dff['order1'])*location_x&#10;# print(dff)&#10;&#10;# p = (ggplot(dff)+&#10;# geom_bar(aes(x='x',y='value',fill='group'),stat = &quot;identity&quot;, width = 0.8,colour=&quot;none&quot;,size=0.25))&#10;# int(1970.9)&#10;```&#10;&#10;```python&#10;def draw_barchart(year):&#10;    # N_Interval=5&#10;    N_Display=10&#10;    year1=int(year)&#10;    year2=year1+1&#10;    location_x=year-year1&#10;    dff1=df.loc[df['year'].eq(year1),:]  .sort_values(by='value', ascending=False)&#10;    dff1['name']=pd.Categorical(dff1['name'],categories=dff1['name'], ordered=True)&#10;    dff1['order1']=dff1['name'].values.codes&#10;    &#10;    dff2=df.loc[df['year'].eq(year2),:]  .sort_values(by='value', ascending=False)&#10;    dff2['name']=pd.Categorical(dff2['name'],categories=dff2['name'], ordered=True)&#10;    dff2['order2']=dff2['name'].values.codes&#10;    # df_temp1=df.query('year&amp;gt;=@year &amp; year&amp;lt;=@year+1').groupby(by='name',as_index=False).mean()&#10;&#10;    dff=pd.merge(left=dff1,right=dff2[['name','order2','value']],how=&quot;outer&quot;,on=&quot;name&quot;)&#10;    dff.loc[:,['value_x','value_y']]  = dff.loc[:,['value_x','value_y']] .replace(np.nan, 0)&#10;    dff.loc[:,['order1','order2']]  = dff.loc[:,['order1','order2']] .replace(np.nan, dff['order1'].max()+1)&#10;    dff['group']=[group_lk[x] for x in dff.name]&#10;    dff['value']=dff['value_x']+(dff['value_y']-dff['value_x'])*location_x# /N_Interval&#10;    dff['x']=N_Display-(dff['order1']+(dff['order2']-dff['order1'])*location_x)# /N_Interval)&#10;        &#10;    dx = dff['value'].max() / 200&#10;    dff['text_y']=dff['value']-dx&#10;    dff['value']=dff['value'].round(1)&#10;&#10;    dff['group']=pd.Categorical(dff['group'],categories=categories, ordered=True)&#10;    &#10;    p = (ggplot(dff)+&#10;          geom_bar(aes(x='x',y='value',fill='group'),stat = &quot;identity&quot;, width = 0.8,colour=&quot;none&quot;,size=0.25)+&#10;          geom_text(aes(x='x',y='text_y', label='name'),size=9,ha='right',va='bottom',fontweight='bold')+&#10;          geom_text(aes(x='x',y='text_y', label='group'),size=8,ha='right',va='bottom',nudge_x=-0.3)+&#10;          geom_text(aes(x='x',y='value', label='value'),size=10,ha='left',va='center')+&#10;          geom_text(x=3.5,y=28000, label=year1,size=50,color='gray',ha='center',va='center')+&#10;          scale_fill_manual(values= color)+# ['# adb0ff', '# ffb3ff', '# 90d595', '# e48381','# aafbff', '# f7bb5f', '# eafb50']&#10;          scale_y_continuous(limits=(0,41000),expand=(0,0))+&#10;          scale_x_continuous(limits=(0.5,N_Display+0.5),breaks=np.arange(1,N_Display+1),labels=np.arange(N_Display,0,-1),expand=(0,0))+&#10;          coord_flip()+&#10;          labs(x=&quot;Ranking&quot;,&#10;              y=&quot;Population (thousands)&quot;,&#10;              title=&quot;The most populous cities in the world from 1968 to 2018&quot;)+&#10;          theme(&#10;              # plot_margin=0.1,&#10;              panel_grid_major_x=element_line(linetype='--',color='gray',alpha=0.5),&#10;              plot_background=element_blank(),&#10;              panel_background=element_blank(),&#10;              legend_position='none'))   &#10;    return p&#10;   &#10;draw_barchart(1970.9)&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 640x480 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;import matplotlib.animation as animation&#10;from IPython.display import HTML&#10;kmin = 1950&#10;kmax = 2019&#10;step_frames = 0.25&#10;plots = (draw_barchart(k) for k in np.arange(kmin, kmax, step_frames))&#10;ani = PlotnineAnimation(plots, interval=100, repeat_delay=200)&#10;HTML(ani.to_jshtml())&#10;```&#10;```&#10;Animation size has reached 21009209 bytes, exceeding the limit of 20971520.0. If you're sure you want a larger animation embedded, set the animation.embed_limit rc parameter to a larger value (in MB). This and further frames will be dropped.&#10;&#10;```&#10;&#10;```python&#10;import matplotlib.animation as animation&#10;writer = animation.FFMpegWriter(fps=30, codec='libx264') &#10;ani.save('animation.mp4', writer=writer)&#10;```&#10;&#10;```python&#10;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>