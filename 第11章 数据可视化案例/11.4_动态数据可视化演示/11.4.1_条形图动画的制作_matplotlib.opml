<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="11.4.1_条形图动画的制作_matplotlib&#10;" _note="import pandas as pd&#10;import matplotlib as mpl&#10;import numpy as np&#10;import matplotlib.pyplot as plt&#10;import matplotlib.ticker as ticker &#10;import matplotlib.animation as animation&#10;from IPython.display import HTML&#10;import seaborn as sns&#10;import matplotlib.pyplot as plt&#10;plt.rcParams['font.sans-serif']=['SimHei']  # 用来正常显示中文标签&#10;plt.rcParams['axes.unicode_minus']=False # 用来正常显示负号&#10;&#10;```&#10;&#10;```python&#10;df = pd.read_csv('city_populations.csv',usecols=['name', 'group', 'year', 'value'])&#10;df.head(5)&#10;```&#10;```&#10;   name  group  year  value&#10;0  Agra  India  1575  200.0&#10;1  Agra  India  1576  212.0&#10;2  Agra  India  1577  224.0&#10;3  Agra  India  1578  236.0&#10;4  Agra  India  1579  248.0&#10;```&#10;&#10;```python&#10;current_year = 2018&#10;dff = (df[df['year'].eq(current_year)].sort_values(by='value', ascending=True).head(10))&#10;dff&#10;```&#10;```&#10;             name          group  year    value&#10;2537      Karachi           Asia  2018  18185.2&#10;4327     New York  North America  2018  18713.0&#10;1336        Dhaka           Asia  2018  19632.6&#10;1195        Cairo    Middle East  2018  19849.6&#10;4679        Osaka           Asia  2018  20409.0&#10;3574  Mexico City  Latin America  2018  21520.4&#10;5445    Sao Paulo  Latin America  2018  21697.8&#10;3748       Mumbai          India  2018  22120.0&#10;689       Beijing           Asia  2018  22674.2&#10;5547     Shanghai           Asia  2018  25778.6&#10;```&#10;&#10;```python&#10;fig, ax = plt.subplots(figsize=(15, 8))&#10;ax.barh(dff['name'], dff['value'])&#10;```&#10;```&#10;&amp;lt;BarContainer object of 10 artists&amp;gt;&#10;```&#10;&#10;```python&#10;categories=np.unique(df.group)&#10;color = sns.husl_palette(len(categories),h=15/360, l=.65, s=1).as_hex() &#10;colors = dict(zip(categories.tolist(),color))&#10;group_lk = df.set_index('name')['group'].to_dict()&#10;colors&#10;```&#10;```&#10;{'Asia': '#fe6e63',&#10; 'Europe': '#b09d09',&#10; 'India': '#0ab450',&#10; 'Latin America': '#0badb0',&#10; 'Middle East': '#639bfe',&#10; 'North America': '#fe52ed'}&#10;```&#10;&#10;```python&#10;fig, ax = plt.subplots(figsize=(15, 8))&#10;dff = dff[::-1]   # 从上到下翻转值&#10;# 将颜色值传递给`color=`&#10;ax.barh(dff['name'], dff['value'], color=[colors[group_lk[x]] for x in dff['name']])&#10;# 遍历这些值来绘制标签和值(Tokyo, Asia, 38194.2)&#10;for i, (value, name) in enumerate(zip(dff['value'], dff['name'])):&#10;    ax.text(value, i,     name,            ha='right')  # Tokyo: 名字&#10;    ax.text(value, i-.25, group_lk[name],  ha='right')  # Asia: 组名&#10;    ax.text(value, i,     value,           ha='left')   # 38194.2: 值&#10;# 在画布右方添加年份&#10;ax.text(1, 0.4, current_year, transform=ax.transAxes, size=46, ha='right')&#10;```&#10;```&#10;Text(1, 0.4, '2018')&#10;```&#10;&#10;```python&#10;fig, ax = plt.subplots(figsize=(8.5, 7))&#10;def draw_barchart(year):&#10;    N_Display=10&#10;    year1=int(year)&#10;    year2=year1+1&#10;    location_x=year-year1&#10;    dff1=df.loc[df['year'].eq(year1),:]  .sort_values(by='value', ascending=False)&#10;    dff1['name']=pd.Categorical(dff1['name'],categories=dff1['name'], ordered=True)&#10;    dff1['order1']=dff1['name'].values.codes&#10;    &#10;    dff2=df.loc[df['year'].eq(year2),:]  .sort_values(by='value', ascending=False)&#10;    dff2['name']=pd.Categorical(dff2['name'],categories=dff2['name'], ordered=True)&#10;    dff2['order2']=dff2['name'].values.codes&#10;    # df_temp1=df.query('year&amp;gt;=@year &amp; year&amp;lt;=@year+1').groupby(by='name',as_index=False).mean()&#10;&#10;    dff=pd.merge(left=dff1,right=dff2[['name','order2','value']],how=&quot;outer&quot;,on=&quot;name&quot;)&#10;    dff.loc[:,['value_x','value_y']]  = dff.loc[:,['value_x','value_y']] .replace(np.nan, 0)&#10;    dff.loc[:,['order1','order2']]  = dff.loc[:,['order1','order2']] .replace(np.nan, dff['order1'].max()+1)&#10;    dff['group']=[group_lk[x] for x in dff.name]&#10;    dff['value']=dff['value_x']+(dff['value_y']-dff['value_x'])*location_x# /N_Interval&#10;    dff['x']=N_Display-(dff['order1']+(dff['order2']-dff['order1'])*location_x)# /N_Interval)&#10;        &#10;    dx = dff['value'].max() / 200&#10;    dff['text_y']=dff['value']-dx&#10;    dff['value']=dff['value'].round(1)&#10;    &#10;    dff=dff.iloc[0:N_Display,:]&#10;    &#10;    # dff = df[df['year'].eq(year)].sort_values(by='value', ascending=True).tail(10)&#10;    ax.clear()&#10;    plt.barh(dff['x'], dff['value'], color=[colors[group_lk[x]] for x in dff['name']])&#10;    dx = dff['value'].max() / 200&#10;    for i, (x,value, name) in enumerate(zip(dff['x'],dff['value'], dff['name'])):&#10;        plt.text(value-dx, x,     name,           size=14, weight='bold', ha='right', va='bottom')&#10;        plt.text(value-dx, x-.25, group_lk[name], size=10, color='# 444444', ha='right', va='baseline')&#10;        plt.text(value+dx, x,     f'{value:,.0f}',size=14, ha='left',  va='center')&#10;    # ... polished styles&#10;    plt.text(0.9, 0.2, year1, transform=ax.transAxes, color='# 777777', size=60, ha='right', weight=800)&#10;    plt.text(0, -0.1, 'Population (thousands)', transform=ax.transAxes, size=12, color='# 777777')&#10;    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))&#10;    # ax.xaxis.set_ticks_position('top')&#10;    ax.tick_params(axis='x', colors='# 777777', labelsize=12)&#10;    ax.tick_params(axis='y', colors='# 777777', labelsize=12)&#10;    ax.set_xlim(0,41000)&#10;    ax.set_ylim(0.5,N_Display+0.5)&#10;    ax.set_xticks(ticks=np.arange(0,50000,10000))&#10;    ax.set_yticks(ticks=np.arange(N_Display,0,-1))&#10;    ax.set_yticklabels(labels=np.arange(1,N_Display+1))&#10;    ax.margins(0, 0.01)&#10;    ax.grid(which='major', axis='x', linestyle='--')&#10;    ax.set_axisbelow(True)&#10;    ax.text(0, 1.05, 'The most populous cities in the world from 1950 to 2018',&#10;            transform=ax.transAxes, size=17, weight='light', ha='left')&#10;    plt.box(False)&#10;    &#10;draw_barchart(2016)&#10;```&#10;```&#10;&amp;lt;Figure size 612x504 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;import matplotlib.animation as animation&#10;from IPython.display import HTML&#10;fig, ax = plt.subplots(figsize=(8, 7))&#10;plt.subplots_adjust(left=0.12, right=0.98, top=0.85, bottom=0.1)   &#10;animator = animation.FuncAnimation(fig, draw_barchart, frames=np.arange(1950, 2019,0.25),interval=50)&#10;HTML(animator.to_jshtml()) &#10;# or use animator.to_html5_video() or animator.save()&#10;```&#10;```&#10;&amp;lt;IPython.core.display.HTML object&amp;gt;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>