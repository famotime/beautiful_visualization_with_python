<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="11.4.3_三维柱形地图动画&#10;" _note="from mpl_toolkits.mplot3d import Axes3D  &#10;from matplotlib import cm&#10;import pandas as pd&#10;import numpy as np&#10;import matplotlib.pyplot as plt&#10;import matplotlib as mpl&#10;from scipy import interpolate  &#10;# Fixing random state for reproducibility&#10;import matplotlib.pyplot as plt&#10;plt.rcParams['font.sans-serif']=['SimHei']  # 用来正常显示中文标签&#10;plt.rcParams['axes.unicode_minus']=False    # 用来正常显示负号&#10;%matplotlib inline&#10;```&#10;&#10;```python&#10;Source_Path='F:/Python数据可视化之美/Python数据可视化/第11章 数据可视化案例/11.4_动态数据可视化演示/'&#10;```&#10;&#10;```python&#10;from datetime import datetime&#10;file = open(Source_Path+'ShenzhenData/Time_record.csv',encoding=&quot;utf_8_sig'&quot;, errors='ignore')&#10;df_time=pd.read_csv(file)&#10;file.close()&#10;df_time['Time']=[datetime.strptime(d, '%Y/%m/%d %H:%M') for d in df_time['Time']]&#10;&#10;df_time['Hour']=[d.strftime('%H:%M') for d in df_time['Time']]&#10;df_time['Hour']&#10;```&#10;```&#10;0     17:31&#10;1     18:31&#10;2     19:31&#10;3     20:31&#10;4     21:31&#10;5     22:31&#10;6     23:31&#10;7     00:31&#10;8     01:31&#10;9     02:31&#10;10    03:31&#10;11    04:31&#10;12    05:31&#10;13    06:31&#10;14    07:31&#10;15    08:31&#10;16    09:31&#10;17    10:31&#10;18    11:31&#10;19    13:05&#10;20    14:05&#10;21    15:05&#10;22    16:05&#10;23    17:05&#10;24    18:05&#10;25    19:05&#10;26    20:05&#10;Name: Hour, dtype: object&#10;```&#10;&#10;```python&#10;file = open(Source_Path+'/Shenzhen_Point.csv',encoding=&quot;utf_8_sig'&quot;, errors='ignore')&#10;df_grid0=pd.read_csv(file)&#10;file.close()&#10;df_grid0[['lat','long']]=np.round(df_grid0[['lat','long']],3)&#10;```&#10;&#10;```python&#10;&#10;def draw_3dbarchart(Num_time):&#10;    &#10;    file = open(Source_Path+'ShenzhenData/Shenzhen'+str(Num_time)+'.csv',encoding=&quot;utf_8_sig'&quot;, errors='ignore')&#10;    mydata=pd.read_csv(file)&#10;    file.close()&#10;    &#10;    mydata['group']=mydata.transform(lambda x: &quot;(&quot;+ str(x['long'])+&quot;,&quot; + str(x['lat'])+&quot;)&quot;,axis=1) &#10;    mydata['num']=1&#10;    df_Map=mydata.groupby('group',as_index=False).agg({'num': np.sum,'lat': np.mean, 'long': np.mean})&#10;    df_Map[['lat','long']]=np.round(df_Map[['lat','long']],3)&#10;    &#10;    df_grid=pd.merge(df_grid0,df_Map,how='left',on=['lat','long'])&#10;    df_grid.fillna(0, inplace=True)&#10;    &#10;    dz_min=df_grid.num.min()&#10;    dz_max=2500# df_grid.Count.max()&#10;    # df_grid&#10;    ax.clear()&#10;    plt.cla() &#10;    # ax = fig.add_subplot(111, projection='3d')&#10;    # ax = fig.gca(projection='3d')&#10;    ax.view_init(azim=60, elev=20)# # 改变绘制图像的视角,即相机的位置,azim沿着z轴旋转，elev沿着y轴&#10;    ax.grid(False)&#10;    ax.margins(0)&#10;    ax.xaxis._axinfo['tick']['outward_factor'] = 0&#10;    ax.xaxis._axinfo['tick']['inward_factor'] = 0.4&#10;    ax.yaxis._axinfo['tick']['outward_factor'] = 0&#10;    ax.yaxis._axinfo['tick']['inward_factor'] = 0.4&#10;    # ax.zaxis._axinfo['tick']['outward_factor'] = 0&#10;    # ax.zaxis._axinfo['tick']['inward_factor'] = 0.4&#10;    ax.xaxis.pane.fill = False&#10;    ax.yaxis.pane.fill = False&#10;    ax.zaxis.pane.fill = False&#10;    ax.xaxis.pane.set_edgecolor('none')&#10;    ax.yaxis.pane.set_edgecolor('none')&#10;    ax.zaxis.pane.set_edgecolor('none')&#10;    ax.yaxis.set_ticks(np.arange(22.4,22.8,0.1))&#10;    ax.zaxis.line.set_visible(False)&#10;    ax.set_zticklabels([])&#10;    ax.set_zticks([])&#10;  &#10;    dz=df_grid.num.values&#10;    colors = cm.Spectral_r(dz / float(dz_max))&#10;&#10;    ax.bar3d(df_grid.long.values, df_grid.lat.values, 0, 0.02, 0.015, dz, zsort='average',color=colors,&#10;         alpha=1,edgecolor='k',linewidth=0.2)&#10;&#10;    plt.text(0.1,0.95, s='深圳市不同时间的某软件用户数量变化', transform=ax.transAxes, size=25, color='k')&#10;    plt.text(0.1,0.9, s='每个三维柱形高度代表以经纬坐标为中心，方圆3km内的用户总数', transform=ax.transAxes, size=15,weight='light', color='k')&#10;    plt.text(0.12,0.62, s=df_time['Hour'][Num_time-1], transform=ax.transAxes, size=60, color='gray',weight='bold',family='Arial')&#10;    cmap = mpl.cm.Spectral_r&#10;    norm = mpl.colors.Normalize(vmin=0, vmax=1)&#10;    bounds = np.arange(dz_min,dz_max,200)&#10;    norm = mpl.colors.BoundaryNorm(bounds, cmap.N)&#10;    cb2 = mpl.colorbar.ColorbarBase(ax2, cmap=cmap,norm=norm,boundaries=bounds,&#10;    ticks=np.arange(dz_min,dz_max,500),spacing='proportional',label='count')&#10;    # fig.savefig('三维统计直方图.pdf')&#10;    # plt.show()&#10;&#10;&#10;# fig, (ax, ax2) = plt.subplots(figsize=(10, 10), ncols=2)&#10;# fig, ax = plt.subplots(1,1,figsize=(10, 10))# ,projection='3d'&#10;fig = plt.figure(figsize=(10, 10))&#10;ax = fig.gca(projection='3d')&#10;ax2 = fig.add_axes([0.85, 0.35, 0.025, 0.3])&#10;plt.subplots_adjust(left=0.12, right=0.98, top=0.85, bottom=0.1)   &#10;# fig.tight_layout(pad=0)&#10;# ax.set_visible(True)&#10;draw_3dbarchart(1)&#10;```&#10;```&#10;&amp;lt;Figure size 720x720 with 2 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;import matplotlib.animation as animation&#10;from IPython.display import HTML&#10;# fig, ax = plt.subplots(figsize=(10, 10))# ,projection='3d'&#10;# fig= plt.figure(figsize=(10, 10))# ,projection='3d'&#10;# First set up the figure, the axis, and the plot element we want to animate&#10;fig = plt.figure(figsize=(10, 10))&#10;ax = fig.gca(projection='3d')&#10;ax2= fig.add_axes([0.85, 0.35, 0.025, 0.3])&#10;# fig= plt.figure(figsize=(10, 10))&#10;plt.subplots_adjust(left=0.12, right=0.98, top=0.75, bottom=0)   &#10;animator = animation.FuncAnimation(fig, draw_3dbarchart, frames=np.arange(1,27,1),interval=200)&#10;HTML(animator.to_jshtml()) &#10;# or use animator.to_html5_video() or animator.save()&#10;```&#10;```&#10;&amp;lt;IPython.core.display.HTML object&amp;gt;&#10;```&#10;&#10;```python&#10;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>