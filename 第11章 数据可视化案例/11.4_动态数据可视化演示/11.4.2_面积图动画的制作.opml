<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="11.4.2_面积图动画的制作&#10;" _note="# # EasyCharts团队出品，来源于《python数据可视化之美》&#10;# 如需使用与深入学习，请联系微信：EasyCharts&#10;```&#10;&#10;```python&#10;import pandas as pd&#10;import matplotlib as mpl&#10;from matplotlib import cm&#10;import numpy as np&#10;import matplotlib.pyplot as plt&#10;import matplotlib.ticker as ticker &#10;import matplotlib.animation as animation&#10;from IPython.display import HTML&#10;import seaborn as sns&#10;from datetime import datetime&#10;plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签&#10;plt.rcParams['axes.unicode_minus'] = False  # 用来正常显&#10;plt.rc('axes',axisbelow=True) &#10;```&#10;&#10;```python&#10;df = pd.read_csv('BTC_price_history.csv')&#10;df['date']=[datetime.strptime(d, '%Y/%m/%d').date() for d in df['date']]&#10;df['price']=(df['high']+df['low'])/2&#10;df.head(5)&#10;```&#10;```&#10;         date    open    high     low   close       value    price&#10;0  2013-04-28  135.30  135.98  132.10  134.21  1488566728  134.040&#10;1  2013-04-29  134.44  147.49  134.00  144.54  1603768865  140.745&#10;2  2013-04-30  144.00  146.93  134.05  139.00  1542813125  140.490&#10;3  2013-05-01  139.00  139.89  107.72  116.99  1298954594  123.805&#10;4  2013-05-02  116.38  125.60   92.28  105.21  1168517495  108.940&#10;```&#10;&#10;```python&#10;Span=180&#10;N_Span=0&#10;df_temp=df.loc[N_Span*Span:(N_Span+1)*Span,:]&#10;df_temp.head(5)&#10;fig =plt.figure(figsize=(6,4), dpi=100)&#10;plt.subplots_adjust(top=1,bottom=0,left=0,right=0.9,hspace=0,wspace=0)&#10;&#10;plt.fill_between(df_temp.date.values, y1=df_temp.price.values, y2=0,alpha=0.75, facecolor='r', linewidth=1,edgecolor ='none',zorder=1)&#10;plt.plot(df_temp.date, df_temp.price, color='k',zorder=2)&#10;plt.scatter(df_temp.date.values[-1], df_temp.price.values[-1], color='white',s=150,edgecolor ='k',linewidth=2,zorder=3)&#10;plt.text(df_temp.date.values[-1], df_temp.price.values[-1]*1.18,s=np.round(df_temp.price.values[-1],1),size=10,ha='center', va='top')&#10;plt.ylim(0, df_temp.price.max()*1.68)&#10;plt.xticks(ticks=df_temp.date.values[0:Span+1:30],labels=df_temp.date.values[0:Span+1:30],rotation=0)&#10;plt.margins(x=0.01)&#10;&#10;ax = plt.gca()# 获取边框&#10;ax.spines['top'].set_color('none')    # 设置上‘脊梁’为无色&#10;ax.spines['right'].set_color('none')  # 设置上‘脊梁’为无色&#10;ax.spines['left'].set_color('none')   # 设置上‘脊梁’为无色&#10;plt.grid(axis=&quot;y&quot;,c=(217/256,217/256,217/256),linewidth=1)         # 设置网格线   &#10;plt.show()&#10;```&#10;```&#10;&amp;lt;Figure size 600x400 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;Span_Date =180  # 日期范围宽度&#10;Num_Date =180  # 终止日期&#10;df_temp=df.loc[Num_Date-Span_Date: Num_Date,:]  # 选择从Num_Date-Span_Date开始到Num_Date的180天的数据&#10;colors = cm.Spectral_r(df_temp.price / float(max(df_temp.price)))&#10;fig =plt.figure(figsize=(6,4), dpi=100)&#10;plt.subplots_adjust(top=1,bottom=0,left=0,right=0.9,hspace=0,wspace=0)&#10;# plt.fill_between()函数：可以实现红色填充的面积图&#10;# plt.fill_between(df_temp.date.values, y1=df_temp.price.values, y2=0,alpha=0.75, facecolor='r', linewidth=1,edgecolor ='none',zorder=1)&#10;# plt.bar()函数：可以实现Spectral_r颜色映射的面积图&#10;plt.bar(df_temp.date.values,df_temp.price.values,color=colors,width=1,align=&quot;center&quot;,zorder=1)&#10;plt.plot(df_temp.date, df_temp.price, color='k',zorder=2)&#10;plt.scatter(df_temp.date.values[-1], df_temp.price.values[-1], color='white',s=150,edgecolor ='k',linewidth=2,zorder=3)&#10;plt.text(df_temp.date.values[-1], df_temp.price.values[-1]*1.18,s=np.round(df_temp.price.values[-1],1),size=10,ha='center', va='top')&#10;plt.ylim(0, df_temp.price.max()*1.68)&#10;plt.xticks(ticks=df_temp.date.values[0: Span_Date +1:30],labels=df_temp.date.values[0: Span_Date +1:30],rotation=0)&#10;plt.margins(x=0.01)&#10;ax = plt.gca()# 获取边框&#10;ax.spines['top'].set_color('none')   # 设置上‘脊梁’为无色&#10;ax.spines['right'].set_color('none')  # 设置上‘脊梁’为无色&#10;ax.spines['left'].set_color('none')   # 设置上‘脊梁’为无色&#10;plt.grid(axis=&quot;y&quot;,c=(217/256,217/256,217/256),linewidth=1)   # 设置网格线   &#10;plt.show()&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 600x400 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;def draw_areachart(Num_Date):&#10;    Span_Date=180&#10;    ax.clear()&#10;    if Num_Date&amp;lt;Span_Date:&#10;        df_temp=df.loc[0:Num_Date,:]&#10;        df_span=df.loc[0:Span_Date,:]&#10;        colors = cm.Spectral_r(df_span.price.values / float(max(df_span.price.values)))&#10;        plt.bar(df_temp.date.values,df_temp.price.values,color=colors,width=1.5,align=&quot;center&quot;,zorder=1)&#10;        plt.plot(df_temp.date, df_temp.price, color='k',zorder=2)&#10;        plt.scatter(df_temp.date.values[-1], df_temp.price.values[-1], color='white',s=150,edgecolor ='k',linewidth=2,zorder=3)&#10;        plt.text(df_temp.date.values[-1], df_temp.price.values[-1]*1.18,s=np.round(df_temp.price.values[-1],1),&#10;size=10,ha='center', va='top')&#10;        plt.ylim(0, df_span.price.max()*1.68)&#10;        plt.xlim(df_span.date.values[0], df_span.date.values[-1])&#10;        plt.xticks(ticks=df_span.date.values[0:Span_Date+1:30],labels=df_span.date.values[0:Span_Date+1:30],rotation=0,fontsize=9)&#10;    else:&#10;        df_temp=df.loc[Num_Date-Span_Date:Num_Date,:]&#10;        colors = cm.Spectral_r(df_temp.price / float(max(df_temp.price)))&#10;        plt.bar(df_temp.date.values[:-2],df_temp.price.values[:-2],color=colors[:-2],width=1.5,align=&quot;center&quot;,zorder=1)&#10;        plt.plot(df_temp.date[:-2], df_temp.price[:-2], color='k',zorder=2)&#10;        plt.scatter(df_temp.date.values[-4], df_temp.price.values[-4], color='white',s=150,edgecolor ='k',linewidth=2,zorder=3)&#10;        plt.text(df_temp.date.values[-1], df_temp.price.values[-1]*1.18,s=np.round(df_temp.price.values[-1],1),&#10;size=10,ha='center', va='top')&#10;        plt.ylim(0, df_temp.price.max()*1.68)&#10;        plt.xlim(df_temp.date.values[0], df_temp.date.values[-1])&#10;        plt.xticks(ticks=df_temp.date.values[0:Span_Date+1:30],labels=df_temp.date.values[0:Span_Date+1:30],rotation=0,fontsize=9)    &#10;&#10;    plt.margins(x=0.2)&#10;    ax.spines['top'].set_color('none')  # 设置上‘脊梁’为红色&#10;    ax.spines['right'].set_color('none')  # 设置上‘脊梁’为无色&#10;    ax.spines['left'].set_color('none')  # 设置上‘脊梁’为无色&#10;    plt.grid(axis=&quot;y&quot;,c=(217/256,217/256,217/256),linewidth=1)         # 设置网格线  &#10;    plt.text(0.01, 0.95,&quot;BTC平均价格($)&quot;,transform=ax.transAxes, size=10, weight='light', ha='left')&#10;    ax.text(-0.07, 1.03, '2013年到2019年的比特币BTC价格变化情况',transform=ax.transAxes, size=17, weight='light', ha='left')&#10;&#10;fig, ax = plt.subplots(figsize=(6,4), dpi=100)&#10;plt.subplots_adjust(top=1,bottom=0.1,left=0.1,right=0.9,hspace=0,wspace=0)  &#10;draw_areachart(150)&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 600x400 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;import matplotlib.animation as animation&#10;from IPython.display import HTML&#10;fig, ax = plt.subplots(figsize=(6,4), dpi=100)&#10;plt.subplots_adjust(left=0.12, right=0.98, top=0.85, bottom=0.1,hspace=0,wspace=0)  &#10;animator = animation.FuncAnimation(fig, draw_areachart, frames=np.arange(0,df.shape[0],1),interval=100)&#10;HTML(animator.to_jshtml()) &#10;```&#10;```&#10;Animation size has reached 20972385 bytes, exceeding the limit of 20971520.0. If you're sure you want a larger animation embedded, set the animation.embed_limit rc parameter to a larger value (in MB). This and further frames will be dropped.&#10;&#10;```&#10;&#10;```python&#10;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>