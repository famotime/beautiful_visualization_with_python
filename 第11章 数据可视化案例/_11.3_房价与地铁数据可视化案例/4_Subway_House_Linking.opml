<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="4_Subway_House_Linking&#10;" _note="import csv&#10;import pandas as pd&#10;import numpy as np&#10;&#10;&#10;pi=3.1415926&#10;House_Price=[]&#10;with open('ShenzhenHousing_Price_WithLocation.csv.csv') as f:&#10;    f_csv = csv.DictReader(f)&#10;    for row in f_csv:&#10;         info={}             # 新建一个字典用于存放单个房屋的信息&#10;         info={'latitude':row['longitude'],&#10;          'longitude':row['latitude'],&#10;          'unit_price':row['unit_price']}&#10;         House_Price.append(info)&#10;&#10;Train_info=[]&#10;with open('ShenzhenSubway_Station_WithLocation.csv') as f:&#10;    f_csv = csv.DictReader(f)&#10;    for row in f_csv:&#10;         info={}             # 新建一个字典用于存放单个房屋的信息&#10;         info={'Station_Title':row['Station_Title'],&#10;               'latitude':row['latitude'],&#10;               'longitude':row['longitude'],&#10;                'y':row['y'],&#10;               'x':row['x'],&#10;               'Subway_Num2':row['Subway_Num2'],&#10;          }&#10;         Train_info.append(info)&#10;&#10;N_House=len(House_Price)&#10;N_Train=len(Train_info)&#10;Thresold_D=3&#10;&#10;# http://blog.csdn.net/koryako/article/details/51864161&#10;# 设第一点A的经 纬度为(LonA, LatA)，第二点B的经纬度为(LonB, LatB)，&#10;# 按照0度经线的基准，东经取经度的正值(Longitude)，西经取经度负值(-Longitude)，北纬取90-纬度值(90- Latitude)，南纬取90+纬度值(90+Latitude)，&#10;# 则经过上述处理过后的两点被计为(MLonA, MLatA)和(MLonB, MLatB)。那么根据三角推导，可以得到计算两点距离的如下公式：&#10;# C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)&#10;# Distance = R*Arccos(C)*Pi/180&#10;# 如果仅对经度作正负的处理，而不对纬度作90-Latitude(假设都是北半球，南半球只有澳洲具有应用意义)的处理，那么公式将是：&#10;# C = sin(LatA)*sin(LatB) + cos(LatA)*cos(LatB)*cos(MLonA-MLonB)&#10;# Distance = R*Arccos(C)*Pi/180&#10;Train_price=[]&#10;for i in range(0,N_Train):&#10;    Stat_x=float(Train_info[i]['latitude'])&#10;    Stat_y=float(Train_info[i]['longitude'])&#10;    Neighbor=[]&#10;    for j in range(0,N_House):&#10;        House_x=float(House_Price[j]['latitude'])&#10;        House_y=float(House_Price[j]['longitude'])&#10;        D=np.arccos((np.sin(Stat_x*pi/180)*np.sin(House_x*pi/180))+(np.cos(Stat_x*pi/180)*np.cos(House_x*pi/180)*np.cos(Stat_y-House_y)))*6371.004*pi/180&#10;        # print(D)&#10;        if (D&amp;lt;=Thresold_D):&#10;            Neighbor.append(float(House_Price[j]['unit_price']))&#10;    print(np.mean(Neighbor))&#10;    Train_price.append(np.mean(Neighbor))&#10;&#10;&#10;my_df = pd.DataFrame(Train_price)&#10;# my_df.to_csv('ShenzhenSubway_StationHousingPrice.csv', index=False, header=False)&#10;&#10;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>