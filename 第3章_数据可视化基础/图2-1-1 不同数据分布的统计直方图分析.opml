<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="图2-1-1 不同数据分布的统计直方图分析&#10;" _note="import pandas as pd&#10;&#10;import numpy as np&#10;&#10;from plotnine import *&#10;&#10;# from plotnine.data import *&#10;&#10;import matplotlib.pyplot as plt&#10;&#10;import matplotlib&#10;&#10;# plt.rc('font',family='Times New Roman')&#10;&#10;matplotlib.rcParams['font.family'] = 'Times New Roman'&#10;&#10;&#10;&#10;&#10;&#10;def Hist_point(x, bin_width=0.3):&#10;&#10;    division = np.arange(x.min(), x.max(), bin_width)&#10;&#10;    hist, bin_edges = np.histogram(x, bins=division, density=False)&#10;&#10;&#10;&#10;    Hist_x = []&#10;&#10;    Hist_y = []&#10;&#10;&#10;&#10;    for i in range(0, len(bin_edges)-1):&#10;&#10;        for j in range(1, hist[i]+1):&#10;&#10;            Hist_x.append((bin_edges[i]+bin_edges[i+1])/2)&#10;&#10;            Hist_y.append(j)&#10;&#10;&#10;&#10;    df = pd.DataFrame(dict(x=Hist_x, count=Hist_y))&#10;&#10;&#10;&#10;    return df&#10;&#10;&#10;&#10;&#10;&#10;df = pd.read_csv('Distribution_Data.csv')&#10;&#10;df&#10;&#10;&#10;```&#10;```&#10;    class     value&#10;0       n  3.918358&#10;1       n  2.556974&#10;2       n  5.834538&#10;3       n  2.255196&#10;4       n  4.443104&#10;..    ...       ...&#10;395    mm  3.352823&#10;396    mm  3.571257&#10;397    mm  3.932318&#10;398    mm  4.335818&#10;399    mm  3.704272&#10;&#10;[400 rows x 2 columns]&#10;```&#10;&#10;```python&#10;# df['class']=df['class'].astype(&quot;category&quot;,categories= [&quot;n&quot;, &quot;s&quot;, &quot;k&quot;, &quot;mm&quot;],ordered=True)&#10;&#10;df['class'] = df['class'].astype(&quot;category&quot;).cat.set_categories([&#10;&#10;    &quot;n&quot;, &quot;s&quot;, &quot;k&quot;, &quot;mm&quot;], ordered=True)&#10;&#10;df_all = pd.DataFrame(columns=['x', 'count', 'group'])&#10;&#10;mean = []&#10;&#10;median = []&#10;&#10;group = [&quot;n&quot;, &quot;s&quot;, &quot;k&quot;]&#10;&#10;for i in group:&#10;&#10;    # np.random.normal(loc=5,scale=1,size=150)&#10;&#10;    value = df.loc[df['class'] == i, 'value'].values&#10;&#10;    df_temp = Hist_point(value)&#10;&#10;    df_temp['group'] = i&#10;&#10;    df_all = df_all.append(df_temp)&#10;&#10;&#10;&#10;    mean.append(np.mean(value))&#10;&#10;    median.append(np.median(value))&#10;&#10;&#10;&#10;df_line = pd.DataFrame(dict(mean=mean, median=median, group=group))&#10;&#10;df_all['count'] = df_all['count'].astype(int)&#10;&#10;&#10;&#10;df_all&#10;&#10;&#10;```&#10;```&#10;           x  count group&#10;0   0.078488      1     n&#10;1   0.078488      2     n&#10;2   0.678488      1     n&#10;3   0.978488      1     n&#10;4   0.978488      2     n&#10;..       ...    ...   ...&#10;94  5.153806      1     k&#10;95  5.153806      2     k&#10;96  5.153806      3     k&#10;97  5.453806      1     k&#10;98  6.053806      1     k&#10;&#10;[297 rows x 3 columns]&#10;```&#10;&#10;```python&#10;base_plot = (ggplot()&#10;&#10;             + geom_point(df_all, aes(x='x', y='count'),&#10;&#10;                          shape='o', size=5, color='k', fill='w')&#10;&#10;             # +geom_density(df0,aes(x='x'),position = &quot;stack&quot;,size=1,color='k',fill='none')&#10;&#10;             + geom_vline(df_line, aes(xintercept=mean), colour='r', size=2)&#10;&#10;             + geom_vline(df_line, aes(xintercept=median), colour='b', size=2)&#10;&#10;             + scale_x_continuous(breaks=np.arange(0, 8, 1))&#10;&#10;             + facet_wrap('~group')&#10;&#10;             + theme_xkcd()&#10;&#10;             + theme(# panel_background=element_rect(color=&quot;none&quot;),&#10;&#10;                strip_background=element_blank(),&#10;&#10;                panel_border=element_line(color=&quot;none&quot;),&#10;&#10;                axis_line_x=element_line(color=&quot;k&quot;),&#10;&#10;                text=element_text(size=12, colour=&quot;black&quot;),&#10;&#10;                aspect_ratio=0.8,&#10;&#10;                dpi=100,&#10;&#10;                figure_size=(15, 15))&#10;&#10;        )&#10;&#10;&#10;&#10;print(base_plot)&#10;&#10;# base_plot.save('简单统计函数.pdf')&#10;&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 1500x397.749 with 3 Axes&amp;gt;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>