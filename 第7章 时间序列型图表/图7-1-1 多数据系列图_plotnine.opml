<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="图7-1-1 多数据系列图_plotnine&#10;" _note="import time&#10;from scipy import interpolate&#10;import pandas as pd&#10;import numpy as np&#10;from plotnine import *&#10;# from plotnine.data import *&#10;import matplotlib.pyplot as plt&#10;from datetime import datetime&#10;&#10;&#10;df = pd.read_csv('Line_Data.csv')&#10;# df['date'].map(lambda x:datetime.datetime.strptime(x, '%Y/%m/%d').date())&#10;df['date'] = [datetime.strptime(d, '%Y/%m/%d').date() for d in df['date']]&#10;&#10;melt_df = pd.melt(df, id_vars=[&quot;date&quot;],&#10;                  var_name='variable', value_name='value')&#10;&#10;display(df, melt_df)&#10;&#10;```&#10;```&#10;           date    AMZN    AAPL&#10;0    2000-01-01   69.00   25.94&#10;1    2000-02-01   67.00   28.66&#10;2    2000-03-01   55.00   33.95&#10;3    2000-04-01   48.00   31.01&#10;4    2000-05-01   36.00   21.00&#10;..          ...     ...     ...&#10;117  2009-10-01  136.00  188.50&#10;118  2009-11-01  134.52  199.91&#10;119  2009-12-01  125.00  210.73&#10;120  2010-01-01  118.00  192.06&#10;121  2010-02-01  129.00  204.62&#10;&#10;[122 rows x 3 columns]&#10;```&#10;">
    <outline text="图611 多数据系列图. (a)折线图&#10;" _note="base_plot = (ggplot(melt_df, aes(x='date', y='value',&#10;                                 group='variable', color='variable')) +&#10;             # geom_area(fill=&quot;# FF6B5E&quot;,alpha=0.75)+&#10;             geom_line(size=1) +&#10;             scale_x_date(date_labels=&quot;%Y&quot;, date_breaks=&quot;2 year&quot;) +&#10;             scale_fill_hue(s=0.90, l=0.65, h=0.0417, color_space='husl') +&#10;             xlab(&quot;Year&quot;) +&#10;             ylab(&quot;Value&quot;) +&#10;             theme(axis_title=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                   axis_text=element_text(&#10;                       size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                   legend_position=(0.25, 0.8),&#10;                   legend_background=element_blank(),&#10;                   aspect_ratio=0.85,&#10;                   figure_size=(5, 5),&#10;                   dpi=100&#10;                   ))&#10;&#10;print(base_plot)&#10;&#10;```&#10;```&#10;C:\QMDownload\anaconda\lib\site-packages\plotnine\guides\guides.py:197: PlotnineWarning: Cannot generate legend for the 'fill' aesthetic. Make sure you have mapped a variable to it&#10;&#10;```&#10;" />
    <outline text="图611 多数据系列图.(b)面积图&#10;" _note="base_plot = (ggplot(melt_df, aes(x='date', y='value', group='variable')) +&#10;             geom_area(aes(fill='variable'), alpha=0.75, position=&quot;identity&quot;) +&#10;             geom_line(aes(color='variable'), size=0.75) +  # color=&quot;black&quot;,&#10;             scale_x_date(date_labels=&quot;%Y&quot;, date_breaks=&quot;2 year&quot;) +&#10;             scale_fill_hue(s=0.90, l=0.65, h=0.0417, color_space='husl') +&#10;             xlab(&quot;Year&quot;) +&#10;             ylab(&quot;Value&quot;) +&#10;             theme(axis_title=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                   axis_text=element_text(&#10;                       size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                   legend_position=(0.25, 0.8),&#10;                   legend_background=element_blank(),&#10;                   aspect_ratio=0.85,&#10;                   figure_size=(5, 5),&#10;                   dpi=100&#10;                   ))&#10;&#10;print(base_plot)&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 500x427.76 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;# ---------------------------------图6-1-2 填充面积折线图. (a)纯色填------------------------------------------&#10;df = pd.read_csv('Area_Data.csv')&#10;&#10;# df['date'].map(lambda x:datetime.datetime.strptime(x, '%Y/%m/%d').date())&#10;df['date'] = [datetime.strptime(d, '%Y/%m/%d').date() for d in df['date']]&#10;&#10;&#10;base_plot = (ggplot(df, aes(x='date', y='value', group=1)) +&#10;             geom_area(fill=&quot;# FF6B5E&quot;, alpha=0.75, color='none') +&#10;             geom_line(color=&quot;black&quot;, size=0.75) +&#10;             scale_x_date(date_labels=&quot;%Y&quot;, date_breaks=&quot;2 year&quot;) +&#10;             xlab(&quot;Year&quot;) +&#10;             ylab(&quot;Value&quot;) +&#10;             theme(axis_title=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                   axis_text=element_text(&#10;                       size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;                   # legend_background = element_blank(),&#10;                   aspect_ratio=0.85,&#10;                   figure_size=(5, 5),&#10;                   dpi=100)&#10;             )&#10;&#10;print(base_plot)&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 500x427.76 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;# ------------------------------------------图6-1-2 填充面积折线图.(b)颜色映射填充.--------------------------------------&#10;# 从scipy库中导入插值需要的方法 interpolate&#10;&#10;df = pd.read_csv('Area_Data.csv')&#10;&#10;df['x'] = [time.mktime(time.strptime(d, '%Y/%m/%d')) for d in df['date']]&#10;&#10;f = interpolate.interp1d(df['x'], df['value'], kind='quadratic')&#10;# 插值方式:nearest：最邻近插值法；zero：阶梯插值；slinear、linear：线性插值；quadratic、cubic：2、3阶B样条曲线插值&#10;&#10;x_new = np.linspace(np.min(df['x']), np.max(df['x']), 600)&#10;df_interpolate = pd.DataFrame(dict(x=x_new, value=f(x_new)))&#10;&#10;# df['date'].map(lambda x:datetime.datetime.strptime(x, '%Y/%m/%d').date())&#10;df_interpolate['date'] = [datetime.strptime(time.strftime(&#10;    '%Y-%m-%d', time.gmtime(d)), '%Y-%m-%d') for d in df_interpolate['x']]&#10;&#10;base_plot = (ggplot(df_interpolate, aes(x='date', y='value', group=1)) +  # geom_area(fill=&quot;# FF6B5E&quot;,alpha=0.75)&#10;             geom_bar(aes(fill='value', colour='value'), stat=&quot;identity&quot;, alpha=1, width=2) +&#10;             geom_line(color=&quot;black&quot;, size=0.5) +&#10;             scale_color_cmap(name='Reds') +&#10;             # scale_color_gradientn(colours=brewer.pal(9,'Reds'),name = &quot;Value&quot;)+&#10;             scale_x_date(date_labels=&quot;%Y&quot;, date_breaks=&quot;2 year&quot;) +&#10;             xlab(&quot;Year&quot;) +&#10;             ylab(&quot;Value&quot;) +&#10;             guides(fill=False) +&#10;             theme(&#10;    axis_title=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    axis_text=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    legend_background=element_blank(),&#10;    legend_position=(0.25, 0.65),&#10;    aspect_ratio=0.85,&#10;    figure_size=(5, 5),&#10;    dpi=100&#10;))&#10;&#10;print(base_plot)&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 500x427.76 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;# h=time.strftime('%Y-%m-%d', time.gmtime(a))# 再由中间格式转为字符串(str)&#10;# ct =datetime.strptime(h, '%Y-%m-%d')# 最后由字符串格式转为datetime.datetime格式&#10;&#10;# -------------------------------------图6-1-3 夹层填充面积图. (a)单色-----------------------------------------------------&#10;df = pd.read_csv('Line_Data.csv')&#10;&#10;# df['date'].map(lambda x:datetime.datetime.strptime(x, '%Y/%m/%d').date())&#10;df['date'] = [datetime.strptime(d, '%Y/%m/%d').date() for d in df['date']]&#10;&#10;df['ymin'] = df[['AMZN', 'AAPL']].apply(lambda x: x.min(), axis=1)&#10;df['ymax'] = df[['AMZN', 'AAPL']].apply(lambda x: x.max(), axis=1)&#10;&#10;melt_df = pd.melt(df[['date', 'AMZN', 'AAPL']], id_vars=[&#10;                  &quot;date&quot;], var_name='variable', value_name='value')&#10;&#10;&#10;base_plot = (ggplot() +&#10;             geom_ribbon(aes(x='date', ymin='ymin', ymax='ymax', group=1), df, alpha=0.5, fill=&quot;white&quot;, color=&quot;none&quot;) +&#10;             # geom_area(aes(fill=variable),alpha=0.5,position=&quot;identity&quot;)+&#10;             # color=&quot;black&quot;,&#10;             geom_line(aes(x='date', y='value', color='variable', group='variable'), melt_df, size=0.75) +&#10;&#10;             scale_x_date(date_labels=&quot;%Y&quot;, date_breaks=&quot;2 year&quot;) +&#10;             xlab(&quot;Year&quot;) +&#10;             ylab(&quot;Value&quot;) +&#10;             scale_colour_manual(name=&quot;Variable&quot;,&#10;                                 labels=(&quot;AMZN&quot;, &quot;AAPL&quot;),&#10;                                 values=(&quot;# FF6B5E&quot;, &quot;# 00B2F6&quot;)) +&#10;             theme(&#10;    axis_title=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    axis_text=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    legend_background=element_blank(),&#10;    legend_position=(0.25, 0.75),&#10;    aspect_ratio=0.85,&#10;    figure_size=(5, 5),&#10;    dpi=100&#10;))&#10;&#10;print(base_plot)&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 500x427.76 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;# ----------------------------------------图6-1-3 夹层填充面积图.  (b)多色----------------&#10;&#10;df['ymin1'] = df['ymin']&#10;df.loc[(df['AAPL']-df['AMZN']) &amp;gt; 0, 'ymin1'] = np.nan&#10;&#10;df['ymin2'] = df['ymin']&#10;df.loc[(df['AAPL']-df['AMZN']) &amp;lt;= 0, 'ymin2'] = np.nan&#10;&#10;&#10;df['ymax1'] = df['ymax']&#10;df.loc[(df['AAPL']-df['AMZN']) &amp;gt; 0, 'ymax1'] = np.nan&#10;&#10;df['ymax2'] = df['ymax']&#10;df.loc[(df['AAPL']-df['AMZN']) &amp;lt;= 0, 'ymax2'] = np.nan&#10;&#10;&#10;base_plot = (ggplot() +&#10;             # ,fill = AMZN &amp;gt; AAPL&#10;             geom_ribbon(aes(x='date', ymin='ymin1', ymax='ymax1', group=1), df, alpha=0.5, fill=&quot;# 00B2F6&quot;, color=&quot;none&quot;) +&#10;             # ,fill = AMZN &amp;gt; AAPL&#10;             geom_ribbon(aes(x='date', ymin='ymin2', ymax='ymax2', group=1), df, alpha=0.5, fill=&quot;# FF6B5E&quot;, color=&quot;none&quot;) +&#10;             # geom_area(aes(fill=variable),alpha=0.5,position=&quot;identity&quot;)+&#10;             # color=&quot;black&quot;,&#10;             geom_line(aes(x='date', y='value', color='variable', group='variable'), melt_df, size=0.75) +&#10;&#10;             scale_x_date(date_labels=&quot;%Y&quot;, date_breaks=&quot;2 year&quot;) +&#10;             xlab(&quot;Year&quot;) +&#10;             ylab(&quot;Value&quot;) +&#10;             theme(&#10;    axis_title=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    axis_text=element_text(size=10, face=&quot;plain&quot;, color=&quot;black&quot;),&#10;    legend_background=element_blank(),&#10;    legend_position=(0.25, 0.75),&#10;    aspect_ratio=0.85,&#10;    figure_size=(5, 5),&#10;    dpi=100&#10;))&#10;&#10;print(base_plot)&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 500x427.76 with 1 Axes&amp;gt;&#10;```&#10;&#10;" />
    </outline>
  </outline>
  </body>
</opml>