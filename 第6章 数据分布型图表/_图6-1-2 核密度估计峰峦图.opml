<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="_图6-1-2 核密度估计峰峦图&#10;" _note="from plotnine import *&#10;from sklearn.neighbors import KernelDensity&#10;from scipy import interpolate&#10;import pandas as pd&#10;import numpy as np&#10;import joypy&#10;import matplotlib.pyplot as plt&#10;from matplotlib import cm&#10;import seaborn as sns&#10;plt.rc('font', family='Times New Roman')&#10;&#10;&#10;df = pd.read_csv(&quot;lincoln_weather.csv&quot;)&#10;Categories = ['January', 'February', 'March', 'April', 'May', 'June', 'July',&#10;              'August', 'September', 'October', 'November', 'December']&#10;df['Month'] = pd.Categorical(df['Month'], categories=Categories, ordered=True)&#10;df&#10;```&#10;```&#10;            CST  Max.Temperature..F.  Mean.Temperature..F.  \&#10;0      2016/1/1                   37                    24   &#10;1      2016/1/2                   41                    23   &#10;2      2016/1/3                   37                    23   &#10;3      2016/1/4                   30                    17   &#10;4      2016/1/5                   38                    29   &#10;..          ...                  ...                   ...   &#10;361  2016/12/27                   48                    29   &#10;362  2016/12/28                   49                    36   &#10;363  2016/12/29                   44                    30   &#10;364  2016/12/30                   62                    38   &#10;365  2016/12/31                   40                    30   &#10;&#10;     Min.Temperature..F.  Max.Dew.Point..F.  Mean.Dew.Point..F.  \&#10;0                     11               19.0                13.0   &#10;1                      5               22.0                14.0   &#10;2                      8               23.0                15.0   &#10;3                      4               24.0                13.0   &#10;4                     19               29.0                25.0   &#10;..                   ...                ...                 ...   &#10;361                   10               22.0                16.0   &#10;362                   22               22.0                16.0   &#10;363                   16               12.0                 9.0   &#10;364                   14               23.0                15.0   &#10;365                   19               22.0                15.0   &#10;&#10;     Min.Dewpoint..F.  Max.Humidity  Mean.Humidity  Min.Humidity  ...  \&#10;0                 8.0          88.0           68.0          47.0  ...   &#10;1                 4.0         100.0           72.0          44.0  ...   &#10;2                 8.0          92.0           73.0          54.0  ...   &#10;3                 2.0          92.0           82.0          72.0  ...   &#10;4                19.0          96.0           83.0          70.0  ...   &#10;..                ...           ...            ...           ...  ...   &#10;361               7.0          84.0           55.0          25.0  ...   &#10;362               7.0          84.0           52.0          19.0  ...   &#10;363               5.0          62.0           41.0          20.0  ...   &#10;364               9.0          75.0           46.0          17.0  ...   &#10;365               9.0          84.0           56.0          27.0  ...   &#10;&#10;     Mean.Visibility..Miles.  Min.Visibility..Miles.  Max.Wind.Speed..MPH.  \&#10;0                       10.0                    10.0                  20.0   &#10;1                       10.0                    10.0                  15.0   &#10;2                       10.0                    10.0                  13.0   &#10;3                        9.0                     6.0                  17.0   &#10;4                        8.0                     5.0                  22.0   &#10;..                       ...                     ...                   ...   &#10;361                     10.0                    10.0                  18.0   &#10;362                     10.0                    10.0                  26.0   &#10;363                     10.0                    10.0                  30.0   &#10;364                     10.0                     2.0                  20.0   &#10;365                     10.0                    10.0                  24.0   &#10;&#10;     Mean.Wind.Speed.MPH.  Max.Gust.Speed..MPH.  Precipitation..In.  \&#10;0                     9.0                  23.0                   0   &#10;1                     6.0                  18.0                   0   &#10;2                     5.0                  14.0                   0   &#10;3                     7.0                  23.0                   0   &#10;4                    13.0                  28.0                   0   &#10;..                    ...                   ...                 ...   &#10;361                   6.0                  22.0                   0   &#10;362                  12.0                  32.0                   0   &#10;363                  16.0                  38.0                   0   &#10;364                   7.0                  24.0                   0   &#10;365                   8.0                  31.0                   0   &#10;&#10;     CloudCover  Events  WindDir..Degrees.     Month  &#10;0           0.0     NaN              280.0   January  &#10;1           0.0     NaN              312.0   January  &#10;2           0.0     NaN              330.0   January  &#10;3           1.0     NaN              155.0   January  &#10;4           4.0     NaN              178.0   January  &#10;..          ...     ...                ...       ...  &#10;361         0.0    Rain              212.0  December  &#10;362         0.0     NaN              306.0  December  &#10;363         0.0     NaN              301.0  December  &#10;364         0.0     NaN              292.0  December  &#10;365         1.0     NaN              287.0  December  &#10;&#10;[366 rows x 24 columns]&#10;```&#10;&#10;```python&#10;# ----------------------------------(a) ------------------------------------------&#10;sns.set_context(&quot;notebook&quot;, font_scale=1.5,&#10;                rc={'font.size': 12,&#10;                    'axes.labelsize': 20, 'legend.fontsize': 15,&#10;                    'xtick.labelsize': 15, 'ytick.labelsize': 15})&#10;&#10;fig, axes = joypy.joyplot(df, column=[&quot;Mean.Temperature..F.&quot;],&#10;                          by=&quot;Month&quot;, ylim='own', colormap=cm.Spectral_r,  # color='# FF8B19',&#10;                          # hist=True,bins=30,&#10;                          alpha=0.9, figsize=(6, 5))&#10;plt.xlabel(&quot;Mean Temperature&quot;, {'size': 15})&#10;plt.ylabel(&quot;Month&quot;, {'size': 15})&#10;# axes.set_axis_labels(&quot;Mean Temperature&quot;, &quot;Month&quot;)&#10;# plt.show()&#10;# fig.savefig('joyplot.pdf')&#10;&#10;```&#10;```&#10;Text(0, 0.5, 'Month')&#10;```&#10;&#10;```python&#10;# ----------------------------------(b) ------------------------------------------&#10;# import numpy as np&#10;# 从scipy库中导入插值需要的方法 interpolate&#10;&#10;&#10;def df_split(df, f):&#10;    list_f = np.unique(df[f])&#10;    splitdata = []&#10;    for i in list_f:&#10;        splitdata.append(df[df[f] == i])&#10;    return splitdata&#10;&#10;&#10;# 定义函数 x:横坐标列表 y:纵坐标列表 kind:插值方式&#10;dt = df[[&quot;Month&quot;, &quot;Mean.Temperature..F.&quot;]]&#10;# dt=dt.set_index([&quot;Month&quot;])&#10;splitdata = df_split(dt, f='Month')&#10;&#10;xmax = max(dt[&quot;Mean.Temperature..F.&quot;])*1.1&#10;xmin = min(dt[&quot;Mean.Temperature..F.&quot;])*0.9&#10;&#10;&#10;N = len(splitdata)&#10;labels_y = np.unique(df['Month'])&#10;&#10;mydata = pd.DataFrame(columns=[&quot;variable&quot;, &quot;x&quot;, &quot;y&quot;])  # 创建空的Data.Frame&#10;&#10;X_plot = np.linspace(xmin, xmax, 200)[:, np.newaxis]&#10;&#10;for i in range(0, N):&#10;    X = np.array(splitdata[i][&quot;Mean.Temperature..F.&quot;])[:, np.newaxis]&#10;    kde = KernelDensity(kernel='gaussian', bandwidth=3.37).fit(X)&#10;    Y_dens = np.exp(kde.score_samples(X_plot))&#10;    mydata_temp = pd.DataFrame({&quot;variable&quot;: np.repeat(splitdata[i]['Month'][0], len(X_plot)),&#10;                                &quot;x&quot;: X_plot.flatten(), &quot;y&quot;: Y_dens})&#10;    mydata = mydata.append(mydata_temp)&#10;&#10;Categories = ['January', 'February', 'March', 'April', 'May', 'June', 'July',&#10;              'August', 'September', 'October', 'November', 'December']&#10;mydata['variable'] = pd.Categorical(&#10;    mydata['variable'], categories=Categories, ordered=True)&#10;mydata['num_variable'] = pd.factorize(mydata['variable'], sort=True)[0]&#10;&#10;Step = max(mydata['y'])*0.3&#10;mydata['offest'] = -mydata['num_variable']*Step&#10;mydata['density_offest'] = mydata['offest']+mydata['y']&#10;mydata&#10;&#10;```&#10;&#10;```python&#10;p = (ggplot())&#10;for i in range(0, N):&#10;    p = (p + geom_linerange(mydata[mydata['num_variable'] == i],&#10;                            aes(x='x', ymin='offest', ymax='density_offest',&#10;                                group='variable', color='y'),&#10;                            size=1, alpha=1) +&#10;         geom_line(mydata[mydata['num_variable'] == i],&#10;                   aes(x='x', y='density_offest'), color=&quot;black&quot;, size=0.5))&#10;&#10;p = (p+scale_color_cmap(name='Spectral_r') +&#10;     scale_y_continuous(breaks=np.arange(0, -Step*N, -Step),&#10;                        # limits=(max(mydata['density_offest']),-Step*(N-1)),&#10;                        labels=Categories) +&#10;     xlab(&quot;Mean Temperature&quot;) +&#10;     ylab(&quot;Month&quot;) +&#10;     guides(color=guide_colorbar(title=&quot;Density&quot;,&#10;                                 barwidth=15,&#10;                                 barheight=70)) +&#10;     theme_classic() +&#10;     theme(&#10;    panel_background=element_rect(fill=&quot;white&quot;),&#10;    panel_grid_major_x=element_line(colour=&quot;# E5E5E5&quot;, size=.75),&#10;    panel_grid_major_y=element_line(colour=&quot;grey&quot;, size=.25),&#10;    axis_line=element_blank(),&#10;    text=element_text(size=12, colour=&quot;black&quot;),&#10;    plot_title=element_text(size=15, hjust=.5),&#10;    legend_position=&quot;right&quot;,&#10;&#10;    aspect_ratio=1.05,&#10;    dpi=100,&#10;    figure_size=(5, 5)&#10;))&#10;print(p)&#10;# p.save(&quot;joyplot2.pdf&quot;)&#10;&#10;```&#10;&#10;```python&#10;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>