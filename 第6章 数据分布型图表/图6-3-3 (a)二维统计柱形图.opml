<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="图6-3-3 (a)二维统计柱形图&#10;" _note="import pandas as pd&#10;import numpy as np&#10;import matplotlib.pyplot as plt&#10;from mpl_toolkits import mplot3d&#10;import seaborn as sns&#10;from plotnine import *&#10;import scipy.stats as st&#10;from sklearn.datasets.samples_generator import make_blobs&#10;from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import&#10;from matplotlib import cm&#10;import pandas as pd&#10;import numpy as np&#10;import matplotlib.pyplot as plt&#10;import matplotlib as mpl&#10;&#10;&#10;N = 5000&#10;x1 = np.random.normal(1.5, 1, N)&#10;y1 = np.random.normal(1.6, 1, N)&#10;x2 = np.random.normal(2.5, 1, N)&#10;y2 = np.random.normal(2.2, 1, N)&#10;&#10;df = pd.DataFrame({'x': np.append(x1, x2), 'y': np.append(y1, y2)})&#10;df&#10;&#10;```&#10;```&#10;C:\QMDownload\anaconda\lib\site-packages\sklearn\utils\deprecation.py:143: FutureWarning: The sklearn.datasets.samples_generator module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.datasets. Anything that cannot be imported from sklearn.datasets is now part of the private API.&#10;&#10;```&#10;&#10;```python&#10;# Extract x and y&#10;x = df.x.values&#10;y = df.y.values&#10;# Define the borders&#10;deltaX = (max(x) - min(x))/10&#10;deltaY = (max(y) - min(y))/10&#10;xmin = min(x) - deltaX&#10;xmax = max(x) + deltaX&#10;ymin = min(y) - deltaY&#10;ymax = max(y) + deltaY&#10;print(xmin, xmax, ymin, ymax)&#10;# Create meshgrid&#10;# X, Y = np.mgrid[xmin:xmax:30j, ymin:ymax:30j]&#10;&#10;X = np.linspace(xmin, xmax, 30)&#10;Y = np.linspace(ymin, ymax, 30)&#10;&#10;hist, xedges, yedges = np.histogram2d(x, y, (X, Y))&#10;&#10;XX, YY = np.meshgrid(X[1:], Y[1:])&#10;&#10;fig = plt.figure(figsize=(7, 7), dpi=90)&#10;# ax = fig.add_subplot(111, projection='3d')&#10;ax = fig.gca(projection='3d')&#10;ax.view_init(azim=30, elev=20)  # 改变绘制图像的视角,即相机的位置,azim沿着z轴旋转，elev沿着y轴&#10;ax.grid(False)&#10;&#10;ax.xaxis._axinfo['tick']['outward_factor'] = 0&#10;ax.xaxis._axinfo['tick']['inward_factor'] = 0.4&#10;ax.yaxis._axinfo['tick']['outward_factor'] = 0&#10;ax.yaxis._axinfo['tick']['inward_factor'] = 0.4&#10;ax.zaxis._axinfo['tick']['outward_factor'] = 0&#10;ax.zaxis._axinfo['tick']['inward_factor'] = 0.4&#10;ax.xaxis.pane.fill = False&#10;ax.yaxis.pane.fill = False&#10;ax.zaxis.pane.fill = False&#10;ax.xaxis.pane.set_edgecolor('k')&#10;ax.yaxis.pane.set_edgecolor('k')&#10;ax.zaxis.pane.set_edgecolor('k')&#10;&#10;dz = hist.ravel()&#10;zpos = 0&#10;&#10;# Construct arrays with the dimensions for the 16 bars.&#10;dx = dy = 0.5 * np.ones_like(zpos)&#10;dz = hist.ravel()&#10;&#10;colors = cm.Spectral_r(dz / float(max(dz)))&#10;&#10;ax.bar3d(XX.ravel(), YY.ravel(), zpos, 0.3, 0.3, dz, zsort='average', color=colors,&#10;         alpha=1, edgecolor='k', linewidth=0.2)&#10;&#10;ax.set_xlabel(&quot;x axis&quot;)&#10;ax.set_ylabel(&quot;y axis&quot;)&#10;ax.set_zlabel(&quot;count&quot;)&#10;&#10;ax2 = fig.add_axes([0.85, 0.35, 0.025, 0.3])&#10;cmap = mpl.cm.Spectral_r&#10;norm = mpl.colors.Normalize(vmin=0, vmax=1)&#10;bounds = np.arange(min(dz), max(dz), 20)&#10;norm = mpl.colors.BoundaryNorm(bounds, cmap.N)&#10;cb2 = mpl.colorbar.ColorbarBase(ax2, cmap=cmap, norm=norm, boundaries=bounds,&#10;                                ticks=np.arange(min(dz), max(dz), 20), spacing='proportional', label='count')&#10;cb2.set_label('count')&#10;# fig.savefig('三维统计直方图.pdf')&#10;plt.show()&#10;&#10;```&#10;```&#10;-2.6808710865136582 6.698153740234547 -2.5459613205158007 6.469531323852005&#10;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>