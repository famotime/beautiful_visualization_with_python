<?xml version='1.0'?>
<opml version='2.0'>
  <head>
    <ownerEmail>
      quincy.zou@gmail.com
    </ownerEmail>
  </head>
  <body>
  <outline text="图8-1-1 不同排布形式的饼图&#10;" _note="import pandas as pd&#10;import numpy as np&#10;import matplotlib.pyplot as plt&#10;from matplotlib import cm, colors&#10;&#10;&#10;df = pd.DataFrame(dict(labels=['LVS', 'SJM', 'MCE', 'Galaxy', 'MGM', 'Wynn'],&#10;                       sizes=[24.20, 75.90, 12.50, 12.30, 8.10, 12.10]))&#10;df = df.sort_values(by='sizes', ascending=False)&#10;df = df.reset_index()&#10;df&#10;&#10;```&#10;```&#10;   index  labels  sizes&#10;0      1     SJM   75.9&#10;1      0     LVS   24.2&#10;2      2     MCE   12.5&#10;3      3  Galaxy   12.3&#10;4      5    Wynn   12.1&#10;5      4     MGM    8.1&#10;```&#10;&#10;```python&#10;# -------------------------------------图(d)-----------------------------------------------&#10;cmap = cm.get_cmap('Reds_r', 6)&#10;color = [colors.rgb2hex(cmap(i)[:3]) for i in range(cmap.N)]&#10;&#10;&#10;fig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=&quot;equal&quot;))&#10;wedges, texts = ax.pie(df['sizes'].values,&#10;                       startangle=90, shadow=True, counterclock=False, colors=color,&#10;                       wedgeprops=dict(linewidth=0.5, edgecolor='k'))&#10;&#10;&#10;bbox_props = dict(boxstyle=&quot;square,pad=0.3&quot;, fc=&quot;w&quot;, ec=&quot;k&quot;, lw=0.72)&#10;kw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=&quot;-&quot;),&#10;          bbox=bbox_props, zorder=0, va=&quot;center&quot;)&#10;&#10;for i, p in enumerate(wedges):&#10;    ang = (p.theta2 - p.theta1)/2. + p.theta1&#10;    y = np.sin(np.deg2rad(ang))&#10;    x = np.cos(np.deg2rad(ang))&#10;    horizontalalignment = {-1: &quot;right&quot;, 1: &quot;left&quot;}[int(np.sign(x))]&#10;    connectionstyle = &quot;angle,angleA=0,angleB={}&quot;.format(ang)&#10;    kw[&quot;arrowprops&quot;].update({&quot;connectionstyle&quot;: connectionstyle})&#10;    ax.annotate(df['labels'][i], xy=(x, y), xytext=(1.2*x, 1.2*y),  # xytext=(1.35*np.sign(x), 1.4*y),&#10;                horizontalalignment=horizontalalignment,&#10;                arrowprops=dict(arrowstyle='-'))&#10;&#10;plt.show()&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 432x216 with 1 Axes&amp;gt;&#10;```&#10;&#10;```python&#10;# ---------------------------------------图(a)-------------------------------------------------&#10;&#10;df = pd.DataFrame(dict(labels=['LVS', 'SJM', 'MCE', 'Galaxy', 'MGM', 'Wynn'],&#10;                       sizes=[24.20, 75.90, 12.50, 12.30, 8.10, 12.10]))&#10;df = df.sort_values(by='sizes', ascending=False)&#10;df = df.reset_index()&#10;&#10;index = np.append(0, np.arange(df.shape[0]-1, 0, -1))&#10;df = df.iloc[index, :]&#10;df = df.reset_index()&#10;&#10;cmap = cm.get_cmap('Reds_r', 6)&#10;color = [colors.rgb2hex(cmap(i)[:3]) for i in index]&#10;&#10;fig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=&quot;equal&quot;))&#10;&#10;# fig1, ax1 = plt.subplots()&#10;wedges, texts = ax.pie(df['sizes'].values,  # labels=df['labels'],&#10;                       startangle=90, shadow=True, counterclock=False, colors=color,&#10;                       wedgeprops=dict(linewidth=0.5, edgecolor='k'))  # , labels=labels, autopct='%1.1f%%',&#10;# shadow=False, startangle=0,wedgeprops =dict(linewidth=0.5, edgecolor='k'))&#10;# plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.&#10;&#10;bbox_props = dict(boxstyle=&quot;square,pad=0.3&quot;, fc=&quot;w&quot;, ec=&quot;k&quot;, lw=0.72)&#10;kw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=&quot;-&quot;),&#10;          bbox=bbox_props, zorder=0, va=&quot;center&quot;)&#10;&#10;for i, p in enumerate(wedges):&#10;    ang = (p.theta2 - p.theta1)/2. + p.theta1&#10;    y = np.sin(np.deg2rad(ang))&#10;    x = np.cos(np.deg2rad(ang))&#10;    horizontalalignment = {-1: &quot;right&quot;, 1: &quot;left&quot;}[int(np.sign(x))]&#10;    connectionstyle = &quot;angle,angleA=0,angleB={}&quot;.format(ang)&#10;    kw[&quot;arrowprops&quot;].update({&quot;connectionstyle&quot;: connectionstyle})&#10;    ax.annotate(df['labels'][i], xy=(x, y), xytext=(1.2*x, 1.2*y),  # xytext=(1.35*np.sign(x), 1.4*y),&#10;                horizontalalignment=horizontalalignment,&#10;                arrowprops=dict(arrowstyle='-'))&#10;&#10;plt.show()&#10;&#10;```&#10;```&#10;&amp;lt;Figure size 432x216 with 1 Axes&amp;gt;&#10;```&#10;&#10;" />
  </outline>
  </body>
</opml>